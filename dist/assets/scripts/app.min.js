"use strict";

var app = {
  pathToLibsFiles: './assets/libs'
};
window.app = app; // polyfills
// before polyfills

(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('before')) {
      return;
    }

    Object.defineProperty(item, 'before', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function before() {
        // eslint-disable-next-line prefer-rest-params
        var argArr = Array.prototype.slice.call(arguments);
        var docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]); // forEach polyfill


if (window.NodeList && !NodeList.prototype.forEach) {
  NodeList.prototype.forEach = function (callback, thisArg) {
    // eslint-disable-next-line no-param-reassign
    thisArg = thisArg || window;

    for (var i = 0; i < this.length; i++) {
      callback.call(thisArg, this[i], i, this);
    }
  };
}

app.asideFilters = {
  name: 'asideFilters',
  description: 'your script description',
  init: function init() {
    $('.aside-filters__item-drop').on('click', function () {
      $(this).toggleClass('aside-filters__item-drop--active');
      $(this).parent().next().slideToggle('300');

      if ($(this).hasClass('aside-filters__item-drop--active')) {
        $(this).attr('aria-label', 'Свернуть');
      } else {
        $(this).attr('aria-label', 'Развернуть');
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.basketTotal = {
  name: 'basketTotal',
  description: 'your script description',
  init: function init() {
    $('input[name=promocode]').on('change', function () {
      if ($(this).val() !== 0) {
        $(this).addClass('valid');
      }
    });
  }
};
app.blog = {
  name: 'blog',
  description: 'your script description',
  init: function init() {
    new Swiper('.blog-text__slider', {
      loop: true,
      spaceBetween: 27,
      speed: 1000,
      lazy: true,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      breakpoints: {
        576: {
          slidesPerView: 2
        }
      }
    });
  }
};
app.burger = {
  name: 'burger',
  description: 'burger-btn and burger-menu logic',
  init: function init() {
    $('.burger-btn').on('click', function () {
      $('body').addClass('_lock');
      $('.burger-menu').addClass('burger-menu--active');
    });
    $('.burger-menu__close').on('click', function () {
      $('body').removeClass('_lock');
      $('.burger-menu').removeClass('burger-menu--active');
    });
    /* $('.header__menu-link').on('click', function () {
    	$('body').removeClass('_lock');
    	$('.burger-menu').removeClass('burger-menu--active');
    }); */

    $('.burger-menu__list-item span').on('click', function () {
      $(this).parent().siblings().find('span').removeClass('active');
      $(this).parent().siblings().find('ul').slideUp('300');
      $(this).toggleClass('active');
      $(this).next().slideToggle('300');
    });
    $('.header__search-btn').on('click', function () {
      $('.header__main-bottom').toggleClass('header__main-bottom--active');
      $('.header__main-bottom').find('input.search-form__input').toggleClass('search-form__input--active');
    });
    $('.header-info-line__close').on('click', function () {
      $(this).parent().slideUp('300');
    });
  }
};
app.catalogCard = {
  name: 'catalogCard',
  description: 'your script description',
  init: function init() {
    $('.catalog-card__favorite').on('click', function () {
      var _this = this;

      $(this).parent().toggleClass('favorite');
      $(this).addClass('animated');
      setTimeout(function () {
        $(_this).removeClass('animated');
      }, 300);
    });
    $('.catalog__view-btn').on('click', function () {
      $(this).addClass('catalog__view-btn--active');
      $(this).siblings().removeClass('catalog__view-btn--active');

      if ($('.col-btn').hasClass('catalog__view-btn--active')) {
        $('.catalog__cards').addClass('catalog__cards--two-cols');
      } else {
        $('.catalog__cards').removeClass('catalog__cards--two-cols');
      }
    });
  }
};
app.catalogFilters = {
  name: 'catalogFilters',
  description: 'your script description',
  init: function init() {
    $('.catalog-filters__item-title').on('click', function () {
      $(this).parent().siblings().find('legend').removeClass('catalog-filters__item-title--active');
      $(this).parent().siblings().find('div.catalog-drop-filter').slideUp('300');
      $(this).toggleClass('catalog-filters__item-title--active');
      $(this).next().slideToggle('300');
    });
    $('.catalog-drop-filter__item input[type="checkbox"]').on('click', function () {
      var className = $(this).parents('.catalog-filters__item').attr('class').split(' ').join('.');
      var checkedItems = $(".".concat(className, " input:checkbox:checked")).length;

      if (checkedItems > 0) {
        $(this).parents('.catalog-drop-filter').prev().find('span').text("(".concat(checkedItems, ")"));
        $(this).parents('.catalog-drop-filter').prev().css('font-weight', '600');
      } else {
        $(this).parents('.catalog-drop-filter').prev().css('font-weight', '400');
        $(this).parents('.catalog-drop-filter').prev().find('span').text('');
      }
    });
    $('.catalog-filters__reset-btn').on('click', function () {
      $('.catalog-filters__item-title').css('font-weight', '400');
      $('.catalog-filters__item-title').find('span').text('');
    });
    $('.catalog-drop-filter__btn[type=reset]').on('click', function () {
      $(this).parents('.catalog-drop-filter').prev().css('font-weight', '400');
      $(this).parents('.catalog-drop-filter').prev().find('span').text('');
    });
    $('.filters-btn').on('click', function () {
      $('.catalog-filters').addClass('catalog-filters--active');
    });
    $('.catalog-filters__close').on('click', function () {
      $('.catalog-filters').removeClass('catalog-filters--active');
    });
    $('.catalog-filters__item-title').on('click', function () {
      if ($(window).width() < 1025) {
        $('.catalog-filters__back-btn').show();
        $('.catalog-filters__title').text($(this).text());
        $(this).parent().siblings().hide();
        $(this).hide();
        $(this).next().show();
      }
    });
    $('.catalog-filters__back-btn').on('click', function () {
      $('.catalog-filters__back-btn').hide();
      $('.catalog-filters__title').text('Фильтры');
      $('.catalog-filters__item').show();
      $('.catalog-filters__item-title').show();
      $('.catalog-filters__item-title').removeClass('catalog-filters__item-title--active');
      $('.catalog-drop-filter').hide();
    });
  }
};
app.checkout = {
  name: 'checkout',
  description: 'your script description',
  init: function init() {
    $('.checkout-radio').on('click', function () {
      $(this).siblings().removeClass('checkout-radio--checked');
      $(this).addClass('checkout-radio--checked');
      $(this).siblings().find('.checkout-radio__hidden').slideUp('300');
      $(this).find('.checkout-radio__hidden').slideDown('300');
    });
  }
};
app.contacts = {
  name: 'contacts',
  description: 'your script description',
  init: function init() {
    ymaps.ready(init);

    function init() {
      var myMap = new ymaps.Map("moscow-map", {
        center: [55.650150, 37.539626],
        zoom: 15,
        controls: ['zoomControl']
      });
      var myGeoObjects = [];
      myGeoObjects[0] = new ymaps.Placemark([55.650150, 37.539626], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'assets/images/icons/red-pin.svg',
        // Размеры метки.
        iconImageSize: [50, 50] // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        //iconImageOffset: [-3, -42]

      });
      /* myGeoObjects[2] = new ymaps.Placemark([45.035470, 38.975313], {
      	clusterCaption: 'Заголовок',
      	//balloonContentBody: 'Текст в балуне',
      }, {
      	// Необходимо указать данный тип макета.
      	iconLayout: 'default#image',
      	iconImageHref: 'img/icons/pin.svg',
      	// Размеры метки.
      	iconImageSize: [45, 50],
      	// Смещение левого верхнего угла иконки относительно
      	// её «ножки» (точки привязки).
      	iconImageOffset: [-16, -42]
      }); */

      /* var clusterIcons = [{
      	href: '/images/pointer.png',
      	size: [31, 40],
      	offset: [0, 0]
      }]; */

      var clusterer = new ymaps.Clusterer({
        clusterDisableClickZoom: false,
        clusterOpenBalloonOnClick: false,
        // Устанавливаем стандартный макет балуна кластера "Карусель".
        clusterBalloonContentLayout: 'cluster#balloonCarousel',
        // Устанавливаем собственный макет.
        //clusterBalloonItemContentLayout: customItemContentLayout,
        // Устанавливаем режим открытия балуна. 
        // В данном примере балун никогда не будет открываться в режиме панели.
        clusterBalloonPanelMaxMapArea: 0,
        // Устанавливаем размеры макета контента балуна (в пикселях).
        clusterBalloonContentLayoutWidth: 300,
        clusterBalloonContentLayoutHeight: 200,
        // Устанавливаем максимальное количество элементов в нижней панели на одной странице
        clusterBalloonPagerSize: 5 // Настройка внешего вида нижней панели.
        // Режим marker рекомендуется использовать с небольшим количеством элементов.
        // clusterBalloonPagerType: 'marker',
        // Можно отключить зацикливание списка при навигации при помощи боковых стрелок.
        // clusterBalloonCycling: false,
        // Можно отключить отображение меню навигации.
        // clusterBalloonPagerVisible: false

      });
      clusterer.add(myGeoObjects);
      myMap.geoObjects.add(clusterer);
    }
  }
};
app.dropBasket = {
  name: 'dropBasket',
  description: 'your script description',
  init: function init() {
    if ($('.drop-basket__products').length == 0) {
      $('.drop-basket__empty').show();
    } else {
      $('.drop-basket__empty').hide();
    }
  }
};
app.dropMenu = {
  name: 'dropMenu',
  description: 'your script description',
  init: function init() {
    if ($(window).width() >= 1025) {
      $('.header__list-link').not('.header__list-link--red').on('mouseover', function () {
        $(this).parent().siblings().find('a').removeClass('header__list-link--active');
        $(this).toggleClass('header__list-link--active');
        $('.drop-menu').fadeOut();
        $("#".concat($(this).attr('data-category-link'))).fadeToggle('500');
      });
      $(document).on('mouseup ', function (e) {
        var dropLink = $(this);
        var dropMenu = $("#".concat($(this).attr('data-category-link')));

        if (!dropMenu.is(e.target) && !dropLink.is(e.target) && dropMenu.has(e.target).length === 0) {
          $('.drop-menu').fadeOut('300');
          $(this).parent().siblings().find('a').removeClass('header__list-link--active');
        }
      });
    }

    window.addEventListener('scroll', function () {
      if (window.scrollY > window.innerHeight) {
        $('.drop-menu').hide();
        $('.header__list-link--active').removeClass('header__list-link--active');
      }
    });
  }
};
app.faq = {
  name: 'faq',
  description: 'your script description',
  init: function init() {
    $('.faq__item-summary').on('click', function () {
      $(this).parent().siblings().find('div.faq__item-summary').removeClass('faq__item-summary--active');
      $(this).parent().siblings().find('div.faq__item-details').slideUp('300');
      $(this).toggleClass('faq__item-summary--active');
      $(this).next().slideToggle('300');
    });
  }
};
app.feedback = {
  name: 'feedback',
  description: 'your script description',
  init: function init() {
    $('.feedback__form input').on('change', function () {
      if ($(this).val() !== '' && $(this).parents('form').find('input').val() !== '' && !$(this).is(':checked')) {
        $(this).parents('form').find('button[type="submit"]').prop('disabled', false);
      } else {
        $(this).parents('form').find('button[type="submit"]').prop('disabled', true);
      }
    });
  }
};
app.iconsSlider = {
  name: 'iconsSlider',
  description: 'your script description',
  init: function init() {
    // ================ ICONS-SLIDER ============== //
    new Swiper('.icons-slider', {
      slidesPerView: 'auto',
      freeMode: true
    });
  }
};
app.instagram = {
  name: 'instagram',
  description: 'your script description',
  init: function init() {
    var instagramSlider = new Swiper('.instagram-slider', {
      lazy: true,
      loop: true,
      slidesPerView: 1,
      spaceBetween: 52,
      speed: 1000,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      breakpoints: {
        501: {
          slidesPerView: 2
        },
        768: {
          slidesPerView: 3,
          spaceBetween: 30
        },
        1025: {
          slidesPerView: 4,
          spaceBetween: 52
        }
      }
    });
    instagramSlider.on('slideChange', function () {
      new LazyLoad();
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.otherNews = {
  name: 'otherNews',
  description: 'your script description',
  init: function init() {
    var otherNewsSlider = new Swiper('.other-news__slider', {
      loop: true,
      spaceBetween: 20,
      speed: 1000,
      //lazy: true,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      breakpoints: {
        768: {
          slidesPerView: 2,
          spaceBetween: 52
        }
      }
    });
    otherNewsSlider.on('slideChange', function () {
      new LazyLoad();
    });
  }
};
app.pageup = {
  name: 'pageup',
  description: 'your script description',
  init: function init() {
    var pageUp = document.querySelector('.pageup');
    pageUp.addEventListener('click', function () {
      window.scrollTo({
        top: 0,
        behavior: "smooth"
      });
    });
    var footer = document.querySelector('.footer');
    var footerOffset = footer.offsetTop;
    var footerHeight = footer.getBoundingClientRect().height;
    var page = document.querySelector('.page');
    window.addEventListener('scroll', function () {
      if (window.scrollY > window.innerHeight) {
        pageUp.classList.add('active');
      } else {
        pageUp.classList.remove('active');
      }

      if (window.scrollY >= footerOffset - footerHeight - page.children[page.children.length - 1].getBoundingClientRect().height) {
        pageUp.classList.add('in-footer');
      } else {
        pageUp.classList.remove('in-footer');
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.pickupPopup = {
  name: 'pickupPopup',
  description: 'your script description',
  init: function init() {
    ymaps.ready(init);

    function init() {
      var myMap = new ymaps.Map("pickup-map", {
        center: [59.925299, 30.358448],
        zoom: 15,
        controls: ['zoomControl']
      });
      var myGeoObjects = [];
      myGeoObjects[0] = new ymaps.Placemark([59.925299, 30.358448], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'assets/images/icons/red-pin.svg',
        // Размеры метки.
        iconImageSize: [50, 50] // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        //iconImageOffset: [-3, -42]

      });
      myGeoObjects[1] = new ymaps.Placemark([59.922585, 30.348252], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'assets/images/icons/black-pin.svg',
        // Размеры метки.
        iconImageSize: [32, 32] // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        //iconImageOffset: [-3, -42]

      });
      myGeoObjects[2] = new ymaps.Placemark([59.932473, 30.349169], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/black-pin.svg',
        // Размеры метки.
        iconImageSize: [32, 32],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-16, -42]
      });
      myGeoObjects[3] = new ymaps.Placemark([59.885133, 30.443366], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/black-pin.svg',
        // Размеры метки.
        iconImageSize: [32, 32],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-16, -42]
      });
      myGeoObjects[4] = new ymaps.Placemark([59.929538, 30.418321], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/black-pin.svg',
        // Размеры метки.
        iconImageSize: [32, 32],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-16, -42]
      });
      myGeoObjects[5] = new ymaps.Placemark([59.921570, 30.345611], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/black-pin.svg',
        // Размеры метки.
        iconImageSize: [32, 32],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-16, -42]
      });
      myGeoObjects[6] = new ymaps.Placemark([59.912260, 30.329334], {
        clusterCaption: 'Заголовок' //balloonContentBody: 'Текст в балуне',

      }, {
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        iconImageHref: 'img/icons/black-pin.svg',
        // Размеры метки.
        iconImageSize: [32, 32],
        // Смещение левого верхнего угла иконки относительно
        // её «ножки» (точки привязки).
        iconImageOffset: [-16, -42]
      });
      /* var clusterIcons = [{
      	href: '/images/pointer.png',
      	size: [31, 40],
      	offset: [0, 0]
      }]; */

      var clusterer = new ymaps.Clusterer({
        clusterDisableClickZoom: false,
        clusterOpenBalloonOnClick: false,
        // Устанавливаем стандартный макет балуна кластера "Карусель".
        clusterBalloonContentLayout: 'cluster#balloonCarousel',
        // Устанавливаем собственный макет.
        //clusterBalloonItemContentLayout: customItemContentLayout,
        // Устанавливаем режим открытия балуна. 
        // В данном примере балун никогда не будет открываться в режиме панели.
        clusterBalloonPanelMaxMapArea: 0,
        // Устанавливаем размеры макета контента балуна (в пикселях).
        clusterBalloonContentLayoutWidth: 300,
        clusterBalloonContentLayoutHeight: 200,
        // Устанавливаем максимальное количество элементов в нижней панели на одной странице
        clusterBalloonPagerSize: 5 // Настройка внешего вида нижней панели.
        // Режим marker рекомендуется использовать с небольшим количеством элементов.
        // clusterBalloonPagerType: 'marker',
        // Можно отключить зацикливание списка при навигации при помощи боковых стрелок.
        // clusterBalloonCycling: false,
        // Можно отключить отображение меню навигации.
        // clusterBalloonPagerVisible: false

      });
      clusterer.add(myGeoObjects);
      myMap.geoObjects.add(clusterer);
    }
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.popups = {
  name: 'popups',
  description: 'your script description',
  init: function init() {
    $('.region-popup__city .radio-text').on('click', function () {
      $.fancybox.close();
      $('.header__region').text($(this).text());
    });
    $('.js-cart-btn').on('click', function () {
      $('body').addClass('_lock');
      $('.overlay').fadeIn('slow');
      $('#drop-basket').fadeIn('slow');
      $('#drop-basket').addClass('active');
    });
    $('.js-auth-btn').on('click', function () {
      $('body').addClass('_lock');
      $('.overlay').fadeIn('slow');
      $('#auth-popup').fadeIn('slow');
      $('#auth-popup').addClass('active');
    });
    $('#auth input').on('change', function () {
      if ($(this).val() !== '' && $(this).parents('form').find('input[type=password]').val() !== '') {
        $(this).parents('form').find('button[type="submit"]').prop('disabled', false);
      } else {
        $(this).parents('form').find('button[type="submit"]').prop('disabled', true);
      }
    });
    $('#password-change input[type=password]').on('change', function () {
      if ($(this).val() !== '' && $(this).parents('form').find('input[type=password]').val() !== '') {
        $(this).parents('form').find('button[type="submit"]').prop('disabled', false);
      } else {
        $(this).parents('form').find('button[type="submit"]').prop('disabled', true);
      }
    });
    $('.aside-popup__close').on('click', function () {
      $(this).parents('.aside-popup').removeClass('active');
      $(this).parent().fadeOut('slow');
      $('.overlay').fadeOut('300');
      $('body').removeClass('_lock');
    }); //&& $('input[name="user-agreement"]').is(':checked')
    // password input eye toggle

    $('.pass-btn').on('click', function () {
      if ($(this).hasClass('show')) {
        $(this).parent().find('input[type=password]').attr('type', 'text');
        $(this).removeClass('show');
        $(this).addClass('hide');
      } else {
        $(this).parent().find('input[type=password]').attr('type', 'password');
        $(this).removeClass('hide');
        $(this).addClass('show');
      }
    });
  }
};
app.productCard = {
  name: 'productCard',
  description: 'your script description',
  init: function init() {
    new Swiper('.product-popup__slider', {
      loop: true,
      slidesPerView: 1,
      speed: 1000,
      pagination: {
        el: '.swiper-pagination',
        clickable: true
      },
      navigation: {
        nextEl: '.product-popup__slider-arrow--next',
        prevEl: '.product-popup__slider-arrow--prev'
      },
      breakpoints: {
        576: {
          slidesPerView: 2
        },
        768: {
          slidesPerView: 2,
          spaceBetween: 20
        },
        1025: {
          slidesPerView: 1
        }
      }
    });
    $('.minus-btn').on('click', function (e) {
      e.preventDefault();
      var $this = $(this);
      var $input = $this.next();
      var value = parseInt($input.val());

      while (value > 0) {
        value -= 1;
        break;
      }

      $input.val(value);
    });
    $('.plus-btn').on('click', function (e) {
      e.preventDefault();
      var $this = $(this);
      var $input = $this.prev();
      var value = parseInt($input.val());
      value += 1;
      $input.val(value);
    });
    $('.product-color__item .radio-box').on('change', function () {
      if ($(this).is(':checked')) {
        $(this).next().addClass('radio-style--checked');
        $(this).parent().siblings().find('span.radio-style').removeClass('radio-style--checked');
      }
    });
    $('.product-favorite-btn').on('click', function () {
      $(this).toggleClass('favorite');
    });
  }
};
app.productDetails = {
  name: 'productDetails',
  description: 'your script description',
  init: function init() {
    $('.product-details__hide-btn').on('click', function () {
      $(this).toggleClass('product-details__hide-btn--active');
      $(this).parent().next().slideToggle('300');
    });
    $('.tooltip__btn').hover(function () {
      $(this).next().fadeToggle('slow');
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.promoSale = {
  name: 'promoSale',
  description: 'your script description',
  init: function init() {
    new Swiper('.promo-sale__slider', {
      loop: true,
      slidesPerView: 1,
      spaceBetween: 20,
      speed: 1000,
      pagination: {
        el: '.swiper-pagination',
        clickable: true
      },
      navigation: {
        nextEl: '.promo-sale__slider-arrow--next',
        prevEl: '.promo-sale__slider-arrow--prev'
      }
    });
  }
};
app.yourScriptName = {
  name: 'yourScriptName',
  description: 'your script description',
  init: function init() {// your code
  }
};
app.sliderSections = {
  name: 'sliderSections',
  description: 'your script description',
  init: function init() {
    var catalogSlider = new Swiper('.catalog-slider', {
      loop: true,
      slidesPerView: 1,
      spaceBetween: 20,
      speed: 1000,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      breakpoints: {
        768: {
          slidesPerView: 2,
          spaceBetween: 30
        },
        1025: {
          slidesPerView: 4,
          spaceBetween: 52
        }
      }
    });
    catalogSlider.on('slideChange', function () {
      new LazyLoad();
    });
    var catalogNewSlider = new Swiper('.catalog-new-slider', {
      loop: true,
      slidesPerView: 1,
      spaceBetween: 20,
      speed: 1000,
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },
      breakpoints: {
        768: {
          slidesPerView: 2,
          spaceBetween: 30
        },
        1025: {
          slidesPerView: 4,
          spaceBetween: 52
        }
      }
    });
    catalogNewSlider.on('slideChange', function () {
      new LazyLoad();
    });
  }
};
app.validation = {
  name: 'validation',
  description: 'your script description',
  init: function init() {
    // validation
    $.validator.addMethod("minlenghtphone", function (value, element) {
      return value.replace(/\D+/g, '').length > 10;
    });
    $.validator.addMethod("requiredphone", function (value, element) {
      return value.replace(/\D+/g, '').length > 1;
    });

    function validateForms(form) {
      $(form).validate({
        rules: {
          name: "required",
          surname: "required",
          phone: {
            requiredphone: true,
            minlenghtphone: true
          },
          email: "required",
          subscribe_email: {
            required: true,
            email: true
          },
          password: "required",
          repeat_password: {
            required: true,
            equalTo: '#password'
          },
          new_password: "required",
          repeat_new_password: {
            required: true,
            equalTo: '#new_password'
          },
          city: "required",
          index: "required",
          street: "required",
          home: "required",
          flat: "required"
        },
        messages: {
          name: "Пожалуйста, заполните обязательное поле.",
          surname: "Пожалуйста, заполните обязательное поле.",
          phone: {
            requiredphone: "Пожалуйста, заполните обязательное поле."
          },
          email: "Пожалуйста, заполните поле.",
          subscribe_email: {
            required: "Пожалуйста, заполните электронную почту.",
            email: "Пожалуйста, проверьте, правильно ли указан адрес электронной почты."
          },
          password: "Пожалуйста, заполните поле.",
          repeat_password: {
            required: "Пожалуйста, заполните поле.",
            equalTo: "Пароли не совпадают"
          },
          city: "Пожалуйста, заполните обязательное поле.",
          index: "Пожалуйста, заполните поле.",
          street: "Пожалуйста, заполните поле.",
          home: "Пожалуйста, заполните поле.",
          flat: "Пожалуйста, заполните поле."
        }
      });
    }

    validateForms('.footer__subscribe form');
    validateForms('#auth form');
    validateForms('#register form');
    validateForms('.basket-page form');
    $('.form-row__input').on('change', function () {
      if ($('#subscribe_email-error').attr('style') === 'display: none;') {
        $(this).parent().find('button').css('background-color', '#101112');
        $(this).parent().find('button').css('border-color', '#101112');
      }
    });
    $('#subscribe-form').on('submit', function (e) {
      e.preventDefault();
      $(this).append('<div class="success-form">Спасибо! Письмо уже на Вашей почте</div>');
    });
    /* $('form').on('sumbit', function (e) {
    	e.preventDefault();
    		$.ajax({
    		type: "POST",
    		url: "send.php",
    		data: $(this).serialize(),
    	});
    	$('.form__input').removeClass('valid');
    	$(this).find("input").val("");
    	$('form').trigger('reset');
    	return false;
    }); */

    $.fn.setCursorPosition = function (pos) {
      if ($(this).get(0).setSelectionRange) {
        $(this).get(0).setSelectionRange(pos, pos);
      } else if ($(this).get(0).createTextRange) {
        var range = $(this).get(0).createTextRange();
        range.collapse(true);
        range.moveEnd('character', pos);
        range.moveStart('character', pos);
        range.select();
      }
    }; //mask


    $("input[name=phone]").on('click', function () {
      $(this).setCursorPosition(4);
    }).mask("+7 (999) 999-99-99");
  }
};
app.addLibs = {
  name: 'addLibs',
  description: 'connect the script library dynamically',
  addScriptFile: function addScriptFile(nameFile, callback) {
    var body = document.getElementsByTagName('body')[0];
    var script = document.createElement('script');

    script.onload = function () {
      return callback && callback();
    };

    script.src = "".concat(app.pathToLibsFiles, "/js/").concat(nameFile, ".js");
    body.appendChild(script);
  },
  addStyleFile: function addStyleFile(nameFile) {
    var appCss = document.getElementById('app-css');
    var link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = "".concat(app.pathToLibsFiles, "/css/").concat(nameFile, ".css");
    appCss.before(link);
  },
  initScript: function initScript(nameFile, nameLib, callback) {
    var hasLibs = null;
    var scripts = document.querySelectorAll('script');
    scripts.forEach(function (el) {
      var str = el.getAttribute('src');

      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });

    if (!hasLibs) {
      this.addScriptFile(nameFile, callback);
    } else {
      var timerId = setInterval(function () {
        if (window[nameLib] || window.jQuery && jQuery()[nameLib]) {
          callback();
          clearInterval(timerId);
        }
      }, 1);
    }
  },
  initStyle: function initStyle(nameFile) {
    var hasLibs = null;
    var link = document.querySelectorAll('link');
    link.forEach(function (el) {
      var str = el.getAttribute('src');

      if (str) {
        if (str.indexOf(nameFile) >= 0) {
          hasLibs = true;
        }
      }
    });

    if (!hasLibs) {
      this.addStyleFile(nameFile);
    }
  }
};
$(document).ready(function () {
  var lazyLoadInstance = new LazyLoad();
  new WOW().init();
  $('.select__title').on('click', function () {
    $(this).parents('.select').siblings().find('div.select__title').removeClass('select__title--active');
    $(this).parents('.select').siblings().find('div.select__content').slideUp('300');
    $(this).toggleClass('select__title--active');
    $(this).next().slideToggle('300');
  });
  $('.select__option').on('click', function () {
    $(this).parent().prev().text($(this).find('span.select__option-text').text());
    $(this).parent().prev().removeClass('select__title--active');
    $(this).parent().slideUp('300');
  });
  $('.subscribe-item__btn').on('click', function () {
    $('body').addClass('_lock');
    $('.overlay').fadeIn('slow');
    $('#sale-popup').fadeIn('slow');
  });
  /* setTimeout(() => {
  	$.fancybox.open({
  		src: '#discount-popup',
  		type: 'inline',
  		opts: {
  			beforeShow: function (instance, current) {
  				$(".popup form").attr('tabindex', '-1');
  				$(".popup form").attr('autofocus', 'false');
  			},
  			afterShow: function (instance, current) {
  				$(".popup form").attr('tabindex', '-1');
  				$(".popup form").attr('autofocus', 'false');
  			}
  		}
  	});
  }, 120000); */

  if ($('main').hasClass('auth')) {
    $('body').addClass('_lock');
    $('.overlay').show('slow');
    $('#auth-popup').addClass('active');
  }

  if ($('main').hasClass('drop-basket-page')) {
    $('body').addClass('_lock');
    $('.overlay').show('slow');
    $('#drop-basket').fadeIn('slow');
    $('#drop-basket').addClass('active');
  }

  $('.tab').on('click', function (e) {
    e.preventDefault();
    $(this).siblings().removeClass('tab--active');
    $('.tabs-content').removeClass('tabs-content--active');
    $(this).addClass('tab--active');
    $($(this).attr('href')).addClass('tabs-content--active');
  });
  app.validation.init();
  app.burger.init();
  app.dropMenu.init();
  app.dropBasket.init();
  app.promoSale.init();
  app.iconsSlider.init();
  app.sliderSections.init();
  app.instagram.init();
  app.catalogCard.init();
  app.asideFilters.init();
  app.catalogFilters.init();
  app.productCard.init();
  app.productDetails.init();
  app.popups.init();
  app.checkout.init();
  app.blog.init();
  app.otherNews.init();
  app.faq.init();
  app.basketTotal.init();
  app.feedback.init();
  app.pageup.init();

  if ($('main').hasClass('contacts-page')) {
    app.contacts.init();
  }

  if ($('main').hasClass('basket-page')) {
    app.pickupPopup.init();
  }
});
//# sourceMappingURL=app.min.js.map
